#!/usr/local/bin/php
<?php

use Basis\Application;
use Basis\Configuration\Monolog;
use Basis\Dispatcher;
use Basis\Event;
use Basis\Registry;
use Basis\Configuration\Telemetry;
use Symfony\Component\Yaml\Yaml;

include "vendor/autoload.php";

ini_set('date.timezone', 'Europe/Moscow');

$application = new Application();

try {
    array_shift($argv);
    $job = $argv ? array_shift($argv) : 'module.meta';
    $silent = false;

    if ($job == '--silent') {
        $job = $argv ? array_shift($argv) : 'module.meta';
        $silent = true;
    }

    $params = [];
    if (count($argv)) {
        $className = $application->get(Dispatcher::class)
            ->getClass($job);

        $properties = $application->get(Registry::class)    
            ->getClassProperties($className);

        if (count($properties) == count($argv)) {
            $params = array_combine($properties, $argv);
        } else if (array_key_exists('argv', $properties)) {
            $params = [
                'argv' => $argv,
            ];
        } else if (count($properties) == 1) {
            $params = [
                $properties[0] => implode(' ', $argv),
            ];
        } else if (strpos($argv[0], '=') !== false) {
            $params = [];
            foreach ($argv as $kv) {
                [ $k, $v ] = explode('=', $kv);
                $params[$k] = $v;
            }
        } else {
            $required = $application->get(Registry::class)
                ->getRequiredClassProperties($className);
            if (count($required) == count($argv)) {
                $params = array_combine($required, $argv);
            }
        }
    }

    $application->get(Monolog::class)->setName($job);
    if (strpos($job, 'module.') === 0) {
        $application->get(Monolog::class)->setName(explode('.', $job)[1]);
    }

    $application->get(Telemetry::class)->setName('console');

    $result = $application->dispatch($job, $params);
    if ($result && !$silent) {
        if (!is_object($result) || count(get_object_vars($result))) {
            if (class_exists(Yaml::class)) {
                echo Yaml::dump($result, 2, 2, Yaml::DUMP_OBJECT_AS_MAP);
            } else {
                echo json_encode($result), PHP_EOL;
            }
        }
    }

    $application->get(Event::class)->fireChanges($job);

} catch (Exception $e) {
    echo get_class($e), ': ', $e->getMessage(), PHP_EOL;
    echo $e->getTraceAsString(), PHP_EOL;
}
